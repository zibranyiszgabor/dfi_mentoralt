import { Injectable } from '@angular/core';
import { MsalService } from '@azure/msal-angular';
import { AuthenticationResult } from '@azure/msal-browser';
import { environment } from '../../environments/environment';
import { Observable, BehaviorSubject } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { tap } from 'rxjs/operators';


@Injectable({
  providedIn: 'root'
})
export class AuthService {

  constructor(private msalService: MsalService, private http: HttpClient) { }

  private backendUrl = 'https://localhost:5227/api/auth/user'; // ðŸ”¹ Backend API URL
  private userSubject = new BehaviorSubject<any>(null);


  loginAsEmployee(): void {
    console.log('ðŸ”¹ DolgozÃ³i bejelentkezÃ©s...');
    this.msalService.loginRedirect({
      authority: environment.azureAd.authority_employee,
      scopes: ['user.read'],
      prompt: "select_account"
    });
  }

  loginAsStudent(): void {
    console.log('ðŸ”¹ DiÃ¡k bejelentkezÃ©s...');
    this.msalService.loginRedirect({
      authority: environment.azureAd.authority_student,
      scopes: ['user.read'],
      prompt: "select_account"
    });
  }

  logout(): void {
    console.log('ðŸ”¹ MSAL logout...');
    this.msalService.logoutRedirect();
  }

  get isLoggedIn(): boolean {
    const account = this.msalService.instance.getActiveAccount();
    console.log("AktÃ­v fiÃ³k:", account);

    if (account) {
      sessionStorage.setItem('isLoggedIn', 'true'); // ðŸ”¹ Ha van aktÃ­v fiÃ³k, elmentjÃ¼k
      this.storeToken(); // ðŸ”¹ Token mentÃ©se a localStorage-be
      return true;
    }

    // ðŸ”¹ Ha az MSAL nem ad vissza aktÃ­v fiÃ³kot, ellenÅ‘rizzÃ¼k a sessionStorage-t
    return sessionStorage.getItem('isLoggedIn') === 'true';
  }

  storeToken(): void {
    const account = this.msalService.instance.getActiveAccount();
    if (account) {
      const token = account.idToken;
      if (token) {
        sessionStorage.setItem('auth_token', token); // ðŸ”¹ Token mentÃ©se
      }
    }
  }

  getUserData(): Observable<any> {
    return this.http.get<any>(this.backendUrl).pipe(
      tap(userData => {
        sessionStorage.setItem('user_data', JSON.stringify(userData)); // ðŸ”¹ MentÃ©s sessionStorage-ba
        this.userSubject.next(userData); // ðŸ”¹ FrissÃ­tÃ©s a komponensek szÃ¡mÃ¡ra
      })
    );
  }

  getUserFromStorage(): any {
    const userData = sessionStorage.getItem('user_data');
    return userData ? JSON.parse(userData) : null;
  }

}
